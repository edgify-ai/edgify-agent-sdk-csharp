// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: samples.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Edgify {
  public static partial class SamplesService
  {
    static readonly string __ServiceName = "edgify.SamplesService";

    static readonly grpc::Marshaller<global::Edgify.GetSamplesRequest> __Marshaller_edgify_GetSamplesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Edgify.GetSamplesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Edgify.GetSamplesResponse> __Marshaller_edgify_GetSamplesResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Edgify.GetSamplesResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Edgify.AddSampleRequest> __Marshaller_edgify_AddSampleRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Edgify.AddSampleRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Edgify.AddSampleResponse> __Marshaller_edgify_AddSampleResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Edgify.AddSampleResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Edgify.UpdateSampleRequest> __Marshaller_edgify_UpdateSampleRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Edgify.UpdateSampleRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Edgify.UpdateSampleResponse> __Marshaller_edgify_UpdateSampleResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Edgify.UpdateSampleResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Edgify.SyncRequest> __Marshaller_edgify_SyncRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Edgify.SyncRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Edgify.SyncResponse> __Marshaller_edgify_SyncResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Edgify.SyncResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Edgify.DeleteAllSamplesRequest> __Marshaller_edgify_DeleteAllSamplesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Edgify.DeleteAllSamplesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Edgify.DeleteAllSamplesResponse> __Marshaller_edgify_DeleteAllSamplesResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Edgify.DeleteAllSamplesResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Edgify.DeleteSamplesRequest> __Marshaller_edgify_DeleteSamplesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Edgify.DeleteSamplesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Edgify.DeleteSamplesResponse> __Marshaller_edgify_DeleteSamplesResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Edgify.DeleteSamplesResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Edgify.DeleteSampleRequest> __Marshaller_edgify_DeleteSampleRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Edgify.DeleteSampleRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Edgify.DeleteSampleResponse> __Marshaller_edgify_DeleteSampleResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Edgify.DeleteSampleResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Edgify.GetSamplesRequest, global::Edgify.GetSamplesResponse> __Method_GetSamples = new grpc::Method<global::Edgify.GetSamplesRequest, global::Edgify.GetSamplesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetSamples",
        __Marshaller_edgify_GetSamplesRequest,
        __Marshaller_edgify_GetSamplesResponse);

    static readonly grpc::Method<global::Edgify.AddSampleRequest, global::Edgify.AddSampleResponse> __Method_AddSample = new grpc::Method<global::Edgify.AddSampleRequest, global::Edgify.AddSampleResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddSample",
        __Marshaller_edgify_AddSampleRequest,
        __Marshaller_edgify_AddSampleResponse);

    static readonly grpc::Method<global::Edgify.UpdateSampleRequest, global::Edgify.UpdateSampleResponse> __Method_UpdateSample = new grpc::Method<global::Edgify.UpdateSampleRequest, global::Edgify.UpdateSampleResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateSample",
        __Marshaller_edgify_UpdateSampleRequest,
        __Marshaller_edgify_UpdateSampleResponse);

    static readonly grpc::Method<global::Edgify.SyncRequest, global::Edgify.SyncResponse> __Method_Sync = new grpc::Method<global::Edgify.SyncRequest, global::Edgify.SyncResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Sync",
        __Marshaller_edgify_SyncRequest,
        __Marshaller_edgify_SyncResponse);

    static readonly grpc::Method<global::Edgify.DeleteAllSamplesRequest, global::Edgify.DeleteAllSamplesResponse> __Method_DeleteAllSamples = new grpc::Method<global::Edgify.DeleteAllSamplesRequest, global::Edgify.DeleteAllSamplesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteAllSamples",
        __Marshaller_edgify_DeleteAllSamplesRequest,
        __Marshaller_edgify_DeleteAllSamplesResponse);

    static readonly grpc::Method<global::Edgify.DeleteSamplesRequest, global::Edgify.DeleteSamplesResponse> __Method_DeleteSamples = new grpc::Method<global::Edgify.DeleteSamplesRequest, global::Edgify.DeleteSamplesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteSamples",
        __Marshaller_edgify_DeleteSamplesRequest,
        __Marshaller_edgify_DeleteSamplesResponse);

    static readonly grpc::Method<global::Edgify.DeleteSampleRequest, global::Edgify.DeleteSampleResponse> __Method_DeleteSample = new grpc::Method<global::Edgify.DeleteSampleRequest, global::Edgify.DeleteSampleResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteSample",
        __Marshaller_edgify_DeleteSampleRequest,
        __Marshaller_edgify_DeleteSampleResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Edgify.SamplesReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of SamplesService</summary>
    [grpc::BindServiceMethod(typeof(SamplesService), "BindService")]
    public abstract partial class SamplesServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Edgify.GetSamplesResponse> GetSamples(global::Edgify.GetSamplesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Edgify.AddSampleResponse> AddSample(global::Edgify.AddSampleRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Edgify.UpdateSampleResponse> UpdateSample(global::Edgify.UpdateSampleRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Edgify.SyncResponse> Sync(global::Edgify.SyncRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Edgify.DeleteAllSamplesResponse> DeleteAllSamples(global::Edgify.DeleteAllSamplesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Edgify.DeleteSamplesResponse> DeleteSamples(global::Edgify.DeleteSamplesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Edgify.DeleteSampleResponse> DeleteSample(global::Edgify.DeleteSampleRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for SamplesService</summary>
    public partial class SamplesServiceClient : grpc::ClientBase<SamplesServiceClient>
    {
      /// <summary>Creates a new client for SamplesService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public SamplesServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for SamplesService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public SamplesServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected SamplesServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected SamplesServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Edgify.GetSamplesResponse GetSamples(global::Edgify.GetSamplesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSamples(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Edgify.GetSamplesResponse GetSamples(global::Edgify.GetSamplesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetSamples, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Edgify.GetSamplesResponse> GetSamplesAsync(global::Edgify.GetSamplesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSamplesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Edgify.GetSamplesResponse> GetSamplesAsync(global::Edgify.GetSamplesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetSamples, null, options, request);
      }
      public virtual global::Edgify.AddSampleResponse AddSample(global::Edgify.AddSampleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddSample(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Edgify.AddSampleResponse AddSample(global::Edgify.AddSampleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddSample, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Edgify.AddSampleResponse> AddSampleAsync(global::Edgify.AddSampleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddSampleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Edgify.AddSampleResponse> AddSampleAsync(global::Edgify.AddSampleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddSample, null, options, request);
      }
      public virtual global::Edgify.UpdateSampleResponse UpdateSample(global::Edgify.UpdateSampleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateSample(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Edgify.UpdateSampleResponse UpdateSample(global::Edgify.UpdateSampleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateSample, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Edgify.UpdateSampleResponse> UpdateSampleAsync(global::Edgify.UpdateSampleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateSampleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Edgify.UpdateSampleResponse> UpdateSampleAsync(global::Edgify.UpdateSampleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateSample, null, options, request);
      }
      public virtual global::Edgify.SyncResponse Sync(global::Edgify.SyncRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Sync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Edgify.SyncResponse Sync(global::Edgify.SyncRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Sync, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Edgify.SyncResponse> SyncAsync(global::Edgify.SyncRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SyncAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Edgify.SyncResponse> SyncAsync(global::Edgify.SyncRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Sync, null, options, request);
      }
      public virtual global::Edgify.DeleteAllSamplesResponse DeleteAllSamples(global::Edgify.DeleteAllSamplesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAllSamples(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Edgify.DeleteAllSamplesResponse DeleteAllSamples(global::Edgify.DeleteAllSamplesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteAllSamples, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Edgify.DeleteAllSamplesResponse> DeleteAllSamplesAsync(global::Edgify.DeleteAllSamplesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAllSamplesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Edgify.DeleteAllSamplesResponse> DeleteAllSamplesAsync(global::Edgify.DeleteAllSamplesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteAllSamples, null, options, request);
      }
      public virtual global::Edgify.DeleteSamplesResponse DeleteSamples(global::Edgify.DeleteSamplesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteSamples(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Edgify.DeleteSamplesResponse DeleteSamples(global::Edgify.DeleteSamplesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteSamples, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Edgify.DeleteSamplesResponse> DeleteSamplesAsync(global::Edgify.DeleteSamplesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteSamplesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Edgify.DeleteSamplesResponse> DeleteSamplesAsync(global::Edgify.DeleteSamplesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteSamples, null, options, request);
      }
      public virtual global::Edgify.DeleteSampleResponse DeleteSample(global::Edgify.DeleteSampleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteSample(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Edgify.DeleteSampleResponse DeleteSample(global::Edgify.DeleteSampleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteSample, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Edgify.DeleteSampleResponse> DeleteSampleAsync(global::Edgify.DeleteSampleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteSampleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Edgify.DeleteSampleResponse> DeleteSampleAsync(global::Edgify.DeleteSampleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteSample, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override SamplesServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new SamplesServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(SamplesServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetSamples, serviceImpl.GetSamples)
          .AddMethod(__Method_AddSample, serviceImpl.AddSample)
          .AddMethod(__Method_UpdateSample, serviceImpl.UpdateSample)
          .AddMethod(__Method_Sync, serviceImpl.Sync)
          .AddMethod(__Method_DeleteAllSamples, serviceImpl.DeleteAllSamples)
          .AddMethod(__Method_DeleteSamples, serviceImpl.DeleteSamples)
          .AddMethod(__Method_DeleteSample, serviceImpl.DeleteSample).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, SamplesServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetSamples, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Edgify.GetSamplesRequest, global::Edgify.GetSamplesResponse>(serviceImpl.GetSamples));
      serviceBinder.AddMethod(__Method_AddSample, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Edgify.AddSampleRequest, global::Edgify.AddSampleResponse>(serviceImpl.AddSample));
      serviceBinder.AddMethod(__Method_UpdateSample, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Edgify.UpdateSampleRequest, global::Edgify.UpdateSampleResponse>(serviceImpl.UpdateSample));
      serviceBinder.AddMethod(__Method_Sync, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Edgify.SyncRequest, global::Edgify.SyncResponse>(serviceImpl.Sync));
      serviceBinder.AddMethod(__Method_DeleteAllSamples, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Edgify.DeleteAllSamplesRequest, global::Edgify.DeleteAllSamplesResponse>(serviceImpl.DeleteAllSamples));
      serviceBinder.AddMethod(__Method_DeleteSamples, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Edgify.DeleteSamplesRequest, global::Edgify.DeleteSamplesResponse>(serviceImpl.DeleteSamples));
      serviceBinder.AddMethod(__Method_DeleteSample, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Edgify.DeleteSampleRequest, global::Edgify.DeleteSampleResponse>(serviceImpl.DeleteSample));
    }

  }
}
#endregion
